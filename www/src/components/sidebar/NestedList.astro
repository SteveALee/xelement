---
  import NestedGroupBy from '../../scripts/build/groupBy'
  import PrefetchLink from '../NavBar/PreFetchLink.astro'

// Magic Recursive Call to the Same Component, 
const {items,directory:dir,recursive} = Astro.props
const {RecursiveComponent} = Astro.self

let groupedList = Object.entries(NestedGroupBy(items, x => x.directory))
let filterBasedOnPage = [...groupedList.filter(x=>x[0].includes(dir)),...groupedList.filter(x=>!(x[0].includes(dir)))]


---
{
  filterBasedOnPage.map(([directory,list])=>(
    <section>
      <h3>
        {directory}
      </h3>
      <ul>
            {
              list.map((item)=>(
                <li class="sidebar_items">
                  {
                    item.href
                      ? <PrefetchLink class={`sidebar_link ${Astro.request.url.pathname.match(item.href) ? 'sidebar_active' : ''}`} href={item.href}>{item?.meta?.title?.api || item?.meta?.title?.page || item.file}</PrefetchLink>
                    : 
                    item.items && (
                      <Astro.self items={item.items} dir={item.directory} recursive/>
                    )
                  }
                </li>
              ))
            }
          </ul>
    </section>
    ))
}

<style lang="scss" global>
.sidebar{
    &_items{
    text-transform: capitalize;
    }
    &_link{
        margin-inline-start: 1rem;
        &:hover{
          font-weight: 900;
        }
        &_active{
          font-weight: 900;
        }
      }
  }
</style>



<style lang="scss" global>
.sidebar{
    &_items{
    text-transform: capitalize;
    }
    &_link{
        margin-inline-start: 1rem;
        &:hover{
          font-weight: 900;
        }
        &_active{
          font-weight: 900;
        }
      }
  }
</style>